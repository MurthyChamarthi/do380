#!/usr/bin/env groovy

openshift.withCluster() {
    env.NAMESPACE = openshift.project()
    env.APPLICATION_NAME = "widget-factory"
    env.APPLICATION_RELEASE = "0.0.1"
    echo "Starting Pipeline for ${APPLICATION_NAME}..."
}

pipeline {
    // Jenkins will dynamically provision this as OpenShift Pod
    // All the stages and steps of this Pipeline will be executed on this Pod
    // After Pipeline completes the Pod is killed so every run will have clean
    // workspace
    agent {
        label 'maven'
    }
    stages {
        // Run Maven build, skipping tests
        stage('Build & Test Application') {
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh "mvn clean install -Pdebug"
                }
            }
        }

        // apply ansible config
        stage('Apply OpenShift Manifests with Ansible') {
            agent { label "jenkins-agent-ansible" }
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh """
                        ansible-galaxy install -r requirements.yml --roles-path=galaxy
                        ansible-playbook -i .applier/inventory/ galaxy/openshift-applier/playbooks/openshift-cluster-seed.yml \
                            -e source_ref=${env.SOURCE_REF} -e application_source_repository_url=${env.APPLICATION_SOURCE_REPOSITORY_URL} \
                            -e registry_url='${env.REGISTRY_URL}' \
                            -e application_release=${env.APPLICATION_RELEASE} -e db_svc=${env.DATABASE_HOST} \
                            -e namespace=${env.NAMESPACE}
                    """
                    script {
                        openshift.withCluster() {
                            openshift.selector('deployment', env.APPLICATION_NAME).rollout().pause()
                        }
                    }
                }
            }
        }

        // Build Container Image using the artifacts produced in previous stages
        stage('Build Container Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(NAMESPACE) {
                            openshift.selector("bc", "${APPLICATION_NAME}").startBuild().logs("-f")
                        }
                    }
                }
            }
        }

        stage('Deploy to OCP') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.tag("${env.NAMESPACE}/${env.APPLICATION_NAME}:latest", "${env.NAMESPACE}/${env.APPLICATION_NAME}:${APPLICATION_RELEASE}")
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(NAMESPACE) {
                            timeout(time: 5, unit: 'MINUTES') {
                                def deployment = openshift.selector('deployment', env.APPLICATION_NAME)
                                patch = deployment.object()
                                patch.spec.replicas = 1
                                openshift.apply(patch)
                                deployment.rollout().resume()
                                deployment.rollout().status()
                            }
                        }
                    }
                }
            }
        }
    }
}
