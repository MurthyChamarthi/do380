---
# Process cluster_resources before processing other items, including projects.
# This allows items like cluster roles to be defined within cluster_resources.

- name: Handle cluster_resources
  include_tasks: cluster-resources.yml
  with_items: "{{ openshift_cluster.cluster_resources | default([]) }}"
  vars:
    resource_path: "{{ openshift_cluster.resource_path | default(openshift_resource_path) }}"
    resource_list: >-
      {%- if resource_item is mapping -%}
      {{ [resource_item] }}
      {%- else -%}
      {{ lookup(
           'template' if resource_item.endswith('.j2') else 'file',
           lookup('first_found', {'files':resource_item, 'paths': resource_path})
         ) | yaml_to_resource_list
      }}
      {%- endif -%}
  loop_control:
    loop_var: resource_item

- name: Handle cluster process_templates
  include_tasks: process-template.yml
  with_items: "{{ openshift_cluster.process_templates | default([]) }}"
  loop_control:
    loop_var: template

- name: Handle cluster helm_charts
  include_tasks: helm-chart.yml
  with_items: "{{ openshift_cluster.helm_charts | default([]) }}"
  loop_control:
    loop_var: helm_chart

- name: Handle groups
  include_tasks: group.yml
  with_items: "{{ openshift_cluster.groups | default([]) }}"
  loop_control:
    loop_var: group

- name: Handle cluster_role_bindings
  include_tasks: cluster-role-bindings.yml
  when: openshift_cluster.cluster_role_bindings is defined

- name: Handle projects
  include_tasks: project.yml
  with_items: "{{ openshift_cluster.projects | default([]) }}"
  loop_control:
    loop_var: project
  vars:
    cluster_resource_path: "{{ openshift_cluster.resource_path | default(openshift_resource_path) }}"

# Process resources after processing other items such as projects. This
# allows creation of resources in multiple projects in a specific order by
# specifying the namespace in the resource metadata.
- name: Handle cluster level resources
  include_tasks: cluster-resources.yml
  static: false
  with_items: "{{ openshift_cluster.cluster_resources | default([]) }}"
  vars:
    resource_path: "{{ openshift_cluster.resource_path | default(openshift_resource_path) }}"
    resource_list: >-
      {%- if resource_item is mapping -%}
      {{ [resource_item] }}
      {%- else -%}
      {{ lookup(
           'template' if resource_item.endswith('.j2') else 'file',
           lookup('first_found', {'files':resource_item, 'paths': resource_path})
         ) | yaml_to_resource_list
      }}
      {%- endif -%}
  loop_control:
    loop_var: resource_item
